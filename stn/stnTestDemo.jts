#include<"stnRegisterMap.jts">
#include<"jabilTestOpbBus.jts">

SetFinalizeFunction("CleanUpTest"); 	// Sets the Finalize Function
UpdateStatus("-------------     Start     --------------------");

/////////////////////////////////////////////////////////
//----------------   Main Functions  ------------------
/////////////////////////////////////////////////////////
// Open OPB Com
$OPBCom = 10;
call OpbOpen();

$enableTest = 0;

if($enableTest > 0)
{
    // demo to read FPGA Version register @32'h0000_0000
    UpdateStatus("read FPGA Version register @32'h0000_0000");
    $opbAddrStr = "00 00 00 00";
    call OpbRead();

    // demo to read FPGA ID @32'h0000_0001
    UpdateStatus("read FPGA ID @32'h0000_0001");
    $opbAddrStr = "00 00 00 01";
    call OpbRead();

    // demo to read build date @32'h0000_0002
    UpdateStatus("read build date @32'h0000_0002");
    $opbAddrStr = "00 00 00 02";
    call OpbRead();

    // demo to write scratchpad register @32'h0000_0003
    // Then read it back
    UpdateStatus("write scratchpad reg then read it back");
    $opbAddrStr = "00 00 00 03";
    $opbDataStr = "AA BB CC DD";
    call OpbWrite();
    call OpbRead();

    // demo to read GPIO_IN1
    UpdateStatus("demo to read GPIO_IN1");
    call readGPIO_IN1();

    $printStr = IntegerToHexString($BMPLS,2);
    $printStr = StringCat("BMPLS=", $printStr);
    UpdateStatus($printStr);
    //UpdateStatus($SYNC_MONITOR);
    //UpdateStatus($GROTPWR_STS_N);
    //UpdateStatus($BMENLP_LOC_SINK_STATE);

    // demo to read GPIO_IN2
    UpdateStatus("demo to read GPIO_IN2");
    call readGPIO_IN2();
    $printStr = IntegerToHexString($P5VISO_STATUS,2);
    $printStr = StringCat("P5VISO_STATUS=", $printStr);
    UpdateStatus($printStr);

}

if($enableTest > 0)
{
    // demo to write GPIO_OUT1
    UpdateStatus("write GPIO_OUT1");
    // select AD_IN15
    $AD_SEL0 = 0;
    $AD_SEL1 = 1;
    $AD_SEL2 = 1;
    $AD_SEL3 = 0;
    $AD_SEL4 = 1;
    $AD_SEL5 = 0;
    $AD_SEL6 = 0;
    $AD_SEL7 = 0;

    $PUMP_CLR_FLT_ON = 0;
    $SYNC_LOC_OUT = 0;
    $SYNC_OUT = 0;
    $LGCTRL1 = 0;
    $LGCTRL2 = 0;
    $LGCTRL3 = 0;

    $LP_MON_A0 = 0;
    $LP_MON_A1 = 0;
    $LP_MON_A2 = 0;
    $LP_MON_SEL0 = 0;
    $LP_MON_SEL1 = 0;
    $LP_MON_SEL2 = 0;
    $LP_MON_SEL3 = 0;

    $ENCODER_FUSE_ON_N = 0;
    $PUMP_EN_ON = 0;
    $SF6_24V_ON = 0;
    $SF6_VALVE_OPEN = 0;
    $WATER_FUSE_ON = 0;
    $DKB_FUSE_ON = 0;
    $PEND_FUSE_ON = 0;
    call writeGPIO_OUT1();

    // demo to write GPIO_OUT2
    UpdateStatus("write GPIO_OUT2");
    $STAT_LED1_N = 1;
    $STAT_LED2_N = 0;
    $STAT_LED3_N = 1;
    $HEARTBEAT_LED_N = 0;
    $CAN1_LED_N = 1;
    $CAN2_LED_N = 0;
    $CAN3_LED_N = 1;
    $CAN4_LED_N = 0;
    $ENCODER_TX_ENAB1 = 0;
    $ENCODER_TX_ENAB2 = 1;
    call writeGPIO_OUT2();

    // demo to readADCResult @AD_IN15
    // AD_SEL[0..7] = 8'b01101000
    UpdateStatus("demo to readADCResult @AD_IN15");
    call readADCResult();
    UpdateStatus("AD_IN15(5V_MON) =");
    $measureVal_5V = $adcResultFloat * 3;
    UpdateStatus($measureVal_5V);

    // demo to readADCResult @AD_IN16
    // AD_SEL[0..7] = 8'b11101000
    UpdateStatus("demo to readADCResult @AD_IN16");
    $AD_SEL0 = 1;
    $AD_SEL1 = 1;
    $AD_SEL2 = 1;
    $AD_SEL3 = 0;
    $AD_SEL4 = 1;
    $AD_SEL5 = 0;
    $AD_SEL6 = 0;
    $AD_SEL7 = 0;
    call writeGPIO_OUT1();
    call readADCResult();
    UpdateStatus("AD_IN16(3.3V_MON) =");
    $measureVal_3p3V = $adcResultFloat * 2;
    UpdateStatus($measureVal_3p3V);

    // DAC demo
    UpdateStatus("DAC Demo: output 2.5V");
    $opbAddrStr = "00 06 00 0B";
    $opbDataStr = "00 00 FF FF"; //16'hFFFF = 65535 -> 2.5V
    call OpbWrite();

    // demo to readADCResult @AD_IN38
    // AD_SEL[0..7] = 8'b11101000
    UpdateStatus("demo to readADCResult DAC_MON@AD_IN38");
    $AD_SEL0 = 1;
    $AD_SEL1 = 0;
    $AD_SEL2 = 1;
    $AD_SEL3 = 0;
    $AD_SEL4 = 0;
    $AD_SEL5 = 0;
    $AD_SEL6 = 0;
    $AD_SEL7 = 1;
    call writeGPIO_OUT1();


    call readADCResult();
    UpdateStatus("AD_IN38(DAC_MON) =");
    $measureVal_DAC = $adcResultFloat * 1;
    UpdateStatus($measureVal_DAC);

}

// CAN Test
// CAN Write INT ENA
UpdateStatus("CAN Write INT_ENA");
$opbAddrStr = "00 08 00 04";
$opbDataStr = "FF FF FF FF"; // Enable all INT
call OpbWrite(); //APB Write
$opbAddrStr = "00 08 80 04";
call OpbWrite(); //APB Read
call OpbRead();

// CAN1 Write CMD
UpdateStatus("CAN1 Write CMD");
$opbAddrStr = "00 08 00 14";
// B3:LPBK_MODE, B2: LISTEN_MODE, B0:RUN_STOP_MODE 
//$opbDataStr = "00 00 00 01";//"00000001": GOOD to receive message on ZLGCAN
$opbDataStr = "00 00 00 05"; //"00000005": GOOD to run loopback Test 
call OpbWrite(); //APB Write
$opbAddrStr = "00 08 80 14";
call OpbWrite(); //APB Read
$opbAddrStr = "00 08 80 14";
call OpbRead();
$opbAddrStr = "00 08 00 00";
call OpbRead();

// CAN1 Write CONFIG
UpdateStatus("CAN1 Write CONFIG");
$opbAddrStr = "00 08 00 18";
$opbDataStr = "00 09 04 60"; // CLK100M, 1MBPS
call OpbWrite(); //APB Write
$opbAddrStr = "00 08 80 18";
call OpbWrite(); //APB Read
$opbAddrStr = "00 08 80 18";
call OpbRead();

// CAN1 Write TX_MSG0_ID - WO
UpdateStatus("CAN1 Write TX_MSG0_ID");
$opbAddrStr = "00 08 00 24";
$opbDataStr = "FE 20 00 00"; // TX_ID = 11'H7F1
call OpbWrite();//APB Write

// CAN1 Write RX_MSG0_AMR
UpdateStatus("CAN1 Write RX_MSG0_AMR");
$opbAddrStr = "00 08 02 30";
$opbDataStr = "FF FF FF FF";
call OpbWrite(); //APB Write
$opbAddrStr = "00 08 82 30";
call OpbWrite(); //APB Read
call OpbRead();

// CAN1 Write RX_MSG0_AMR_DATA
UpdateStatus("CAN1 Write RX_MSG0_AMR_DATA");
$opbAddrStr = "00 08 02 38";
$opbDataStr = "FF FF FF FF";
call OpbWrite(); //APB Write
$opbAddrStr = "00 08 82 38";
call OpbWrite(); //APB Read
call OpbRead();

// CAN1 Write RX_MSG0_ACR
UpdateStatus("CAN1 Write RX_MSG0_ACR");
$opbAddrStr = "00 08 02 34";
$opbDataStr = "00 00 00 00";
call OpbWrite(); //APB Write
$opbAddrStr = "00 08 82 34";
call OpbWrite(); //APB Read
call OpbRead();

// CAN1 Write RX_MSG0_ACR_DATA
UpdateStatus("CAN1 Write RX_MSG0_ACR_DATA");
$opbAddrStr = "00 08 02 3C";
$opbDataStr = "00 00 00 00";
call OpbWrite(); //APB Write
$opbAddrStr = "00 08 82 3C";
call OpbWrite(); //APB Read
call OpbRead();

// CAN1 Write TX_MSG0 WORD1
UpdateStatus("CAN1 Write TX_MSG0 WORD1");
$opbAddrStr = "00 08 00 28";
$opbDataStr = "11 22 33 44";
call OpbWrite();//APB Write

// CAN1 Write TX_MSG0 WORD0
UpdateStatus("CAN1 Write TX_MSG0 WORD0");
$opbAddrStr = "00 08 00 2C";
$opbDataStr = "55 66 77 88";
call OpbWrite();//APB Write

// CAN1 Read RX_MSG0 CTRL
UpdateStatus("CAN1 Write RX_MSG0 CTRL");
$opbAddrStr = "00 08 02 20";
$opbDataStr = "FF FF FF FF";
call OpbWrite();//APB Write
$opbAddrStr = "00 08 82 20";
call OpbWrite();//APB Read
call OpbRead();

// CAN1 Write TX_MSG0 CTRL
UpdateStatus("CAN1 Write TX_MSG0 CTRL");
$opbAddrStr = "00 08 00 20";
$opbDataStr = "00 88 00 01";
//$opbDataStr = "00 88 00 0F";
call OpbWrite();//APB Write
$opbAddrStr = "00 08 80 20";
call OpbWrite();//APB Read
call OpbRead();

UpdateStatus("Sleep(3)");
Sleep(3);

// CAN Read INT SOURCE
UpdateStatus("CAN Read INT SOURCE");
$opbAddrStr = "00 08 80 00";
$opbDataStr = "00 00 00 00";
call OpbWrite();//APB Read
call OpbRead();

// CAN1 Read TX_BUF STATUS
UpdateStatus("CAN1 Read TX_BUF STATUS");
$opbAddrStr = "00 08 80 0C";
$opbDataStr = "00 00 00 00";
call OpbWrite();//APB Read
call OpbRead();

// CAN1 Read RX_BUF STATUS
UpdateStatus("CAN1 Read RX_BUF STATUS");
$opbAddrStr = "00 08 80 08";
$opbDataStr = "00 00 00 00";
call OpbWrite();//APB Read
call OpbRead();

UpdateStatus("CAN Read ERR STATUS");
$opbAddrStr = "00 08 80 10";
$opbDataStr = "00 00 00 00";
call OpbWrite();//APB Read
call OpbRead();

// CAN1 Read RX_MSG0 CTRL
$opbAddrStr = "00 08 82 20";
$opbDataStr = "00 00 00 00";
call OpbWrite();//APB Read
call OpbRead();

// CAN1 Read RX_MSG0 ID
$opbAddrStr = "00 08 82 24";
$opbDataStr = "00 00 00 00";
call OpbWrite();//APB Read
call OpbRead();

// CAN1 Read RX_MSG0 WORD1
$opbAddrStr = "00 08 82 28";
$opbDataStr = "00 00 00 00";
call OpbWrite();//APB Read
call OpbRead();

// CAN1 Read RX_MSG0 WORD0
$opbAddrStr = "00 08 82 2C";
$opbDataStr = "00 00 00 00";
call OpbWrite();//APB Read
call OpbRead();

if($enableTest > 0)
{
    // CAN2 Write CMD reg
    UpdateStatus("CAN2");
    $opbAddrStr = "00 09 08 14";
    $opbDataStr = "00 00 00 05"; // 5:LPBK_MODE
    call OpbWrite(); //APB Write
    $opbAddrStr = "00 09 88 14";
    call OpbWrite(); //APB Read
    $opbAddrStr = "00 09 08 14";
    call OpbRead();
    $opbAddrStr = "00 09 00 00";
    call OpbRead();

    // CAN3 Write CMD reg
    UpdateStatus("CAN3");
    $opbAddrStr = "00 0A 08 14";
    $opbDataStr = "00 00 00 05"; // 5:LPBK_MODE
    call OpbWrite(); //APB Write
    $opbAddrStr = "00 0A 88 14";
    call OpbWrite(); //APB Read
    $opbAddrStr = "00 0A 08 14";
    call OpbRead();
    $opbAddrStr = "00 0A 00 00";
    call OpbRead();

    // CAN4 Write CMD reg
    UpdateStatus("CAN4");
    $opbAddrStr = "00 0B 08 14";
    $opbDataStr = "00 00 00 05"; // 5:LPBK_MODE
    call OpbWrite(); //APB Write
    $opbAddrStr = "00 0B 88 14";
    call OpbWrite(); //APB Read
    $opbAddrStr = "00 0B 08 14";
    call OpbRead();
    $opbAddrStr = "00 0B 00 00";
    call OpbRead();


    // Write RX_MSG0_AMR
    $opbAddrStr = "00 08 0A 30";
    $opbDataStr = "AB CD EF FF";
    call OpbWrite(); //APB Write
    $opbAddrStr = "00 08 8A 30";
    call OpbWrite(); //APB Read
    call OpbRead();
    
    // Write RX_MSG0_AMR
    $opbAddrStr = "00 09 0A 30";
    $opbDataStr = "AB CD EF FF";
    call OpbWrite(); //APB Write
    $opbAddrStr = "00 09 8A 30";
    call OpbWrite(); //APB Read
    call OpbRead();
    
    // Write RX_MSG0_AMR
    $opbAddrStr = "00 0A 0A 30";
    $opbDataStr = "AB CD EF FF";
    call OpbWrite(); //APB Write
    $opbAddrStr = "00 0A 8A 30";
    call OpbWrite(); //APB Read
    call OpbRead();
    
    // Write RX_MSG0_AMR
    $opbAddrStr = "00 0B 0A 30";
    $opbDataStr = "AB CD EF FF";
    call OpbWrite(); //APB Write
    $opbAddrStr = "00 0B 8A 30";
    call OpbWrite(); //APB Read
    call OpbRead();

}


if($enableTest > 0)
{
    // Write Config reg
    $opbAddrStr = "00 08 08 18";
    $opbDataStr = "00 09 04 60";
    call OpbWrite(); //APB Write
    $opbAddrStr = "00 08 88 18";
    call OpbWrite(); //APB Read
    call OpbRead();

    //Read TX_MSG0_CTRL
    //$opbAddrStr = "00 08 08 20";
    //call OpbRead();

    // Write INT ENABLE REG
    $opbAddrStr = "00 08 08 04";
    $opbDataStr = "00 00 FF FF";
    call OpbWrite(); //APB Write
    $opbAddrStr = "00 08 88 04";
    call OpbWrite(); //APB Read
    call OpbRead();

    // Write RX_MSG0_AMR
    $opbAddrStr = "00 08 0A 30";
    $opbDataStr = "AB CD EF FF";
    call OpbWrite(); //APB Write
    $opbAddrStr = "00 08 8A 30";
    call OpbWrite(); //APB Read
    call OpbRead();
}

call OpbClose();
End;

/////////////////////////////////////////////////////////
//----------------   Helper Functions  ------------------
/////////////////////////////////////////////////////////

function CleanUpTest()
{
	UpdateStatus("-------------  CleanUpTest  --------------------");
	call OpbClose();  
	End;
}

function MeasurementWithlimits()		//
{
	RecordMeasurementWithLimits($measurementName,$measurementValue,$Unit,true,$nLowerLimit,$nUpperLimit,true);
	return;
}
function MeasurementBoolPassFail()		//
{
	RecordMeasurementPassFail($measurementName,$measurementValue,$Unit,true,$measurePassFail);
	return;
}
function UpdateTestNameToView()			//	Update Test Name to Debug view
{
	$PromptString = "\n[" + $TestName + "] " + $measurementName +"......";
	UpdateStatus($PromptString);
	$measurementName = $TestName + "_"+ $measurementName;
	return;
}

// Function readGPIO_IN1
// Out: $BMPLS, $CCW_LIMIT_STAT, ..., $PWRENLP_SOURCE_STATE
function readGPIO_IN1()
{
    // demo to read GPIO_IN1
    $opbAddrStr = "00 03 00 00";
    call OpbRead();
    $rdbyte3 = Array1DGetValue($opbDataArray, 0);
    $rdbyte2 = Array1DGetValue($opbDataArray, 1);
    $rdbyte1 = Array1DGetValue($opbDataArray, 2);
    $rdbyte0 = Array1DGetValue($opbDataArray, 3);
    //UpdateStatus($rdbyte0);
    //UpdateStatus($rdbyte1);
    //UpdateStatus($rdbyte2);
    //UpdateStatus($rdbyte3);
    
    $BMPLS = BitWiseAnd($rdbyte0, 1);
    $CCW_LIMIT_STAT = BitWiseAnd($rdbyte0, 2);
    $CW_LIMIT_STAT = BitWiseAnd($rdbyte0, 4);
    $LS_OSSD2_N = BitWiseAnd($rdbyte0, 8);
    $LS_WARNING_N = BitWiseAnd($rdbyte0, 10);
    $GANT_LOCK_PIN_STAT = BitWiseAnd($rdbyte0, 20);
    $LS_RES_REQ_N = BitWiseAnd($rdbyte0, 40);
    $SYNC_LOC_MONITOR = BitWiseAnd($rdbyte0, 80);

    $SYNC_MONITOR = BitWiseAnd($rdbyte1, 1);
    $GROTPWR_STS_N = BitWiseAnd($rdbyte1, 2);
    $BMENLP_LOC_SINK_STATE = BitWiseAnd($rdbyte1, 4);
    $BMENLP_LOC_SOURCE_STATE = BitWiseAnd($rdbyte1, 8);
    $BMENLP_SOURCE_STATE = BitWiseAnd($rdbyte1, 10);
    $KVBMENLP_SOURCE_STATE = BitWiseAnd($rdbyte1, 20);
    $MTNENLP_CCH_SOURCE_STATE = BitWiseAnd($rdbyte1, 40);
    $MTNENLP_DKB_SOURCE_STATE = BitWiseAnd($rdbyte1, 80);

    $MTNENLP_LOC_SINK_STATE = BitWiseAnd($rdbyte2, 1);
    $MTNENLP_LOC_SOURCE_STATE = BitWiseAnd($rdbyte2, 2);
    $MTNENLP_SOURCE_STATE = BitWiseAnd($rdbyte2, 4);
    $PWRENLP_LOC_SINK_STATE = BitWiseAnd($rdbyte2, 8);
    $PWRENLP_LOC_SOURCE_STATE = BitWiseAnd($rdbyte2, 10);
    $PWRENLP_SOURCE_STATE = BitWiseAnd($rdbyte2, 20);
    return;
}

// Function readGPIO_IN2
// Out: $FLOW_N1, $FLOW_N2, ..., $P5VISO_STATUS
function readGPIO_IN2()
{
    // demo to read GPIO_IN2
    $opbAddrStr = "00 03 00 01";
    call OpbRead();
    $rdbyte3 = Array1DGetValue($opbDataArray, 0);
    $rdbyte2 = Array1DGetValue($opbDataArray, 1);
    $rdbyte1 = Array1DGetValue($opbDataArray, 2);
    $rdbyte0 = Array1DGetValue($opbDataArray, 3);
    
    $FLOW_N1 = BitWiseAnd($rdbyte0, 1);
    $FLOW_N2 = BitWiseAnd($rdbyte0, 2);
    $FLOW_N3 = BitWiseAnd($rdbyte0, 4);
    $FLOW_N4 = BitWiseAnd($rdbyte0, 8);
    $FLOW_N5 = BitWiseAnd($rdbyte0, 10);
    $P24VDRV_TEMP_FAULT_N = BitWiseAnd($rdbyte0, 20);
    $DKB_EMO_CLOSED = BitWiseAnd($rdbyte0, 40);
    $DKB_FUSE_OK_N = BitWiseAnd($rdbyte0, 80);

    $ENCODER1_FUSE_OK = BitWiseAnd($rdbyte1, 1);
    $HW_GANT_ROT_EN_FLT_N = BitWiseAnd($rdbyte1, 2);
    $PEND_FUSE_OK_N = BitWiseAnd($rdbyte1, 4);
    $PUMP_FAULT = BitWiseAnd($rdbyte1, 8);
    $WATER_HIGH_ERROR = BitWiseAnd($rdbyte1, 10);
    $WATER_FUSE_OK_N = BitWiseAnd($rdbyte1, 20);
    $WATER_LOW_ERROR = BitWiseAnd($rdbyte1, 40);
    $WATER_LOW_WARNING = BitWiseAnd($rdbyte1, 80);

    $P5VISO_STATUS = BitWiseAnd($rdbyte2, 1);
    return;
}

// Function writeGPIO_OUT1
// IN: $AD_SEL0, $AD_SEL1, ..., $PEND_FUSE_ON
function writeGPIO_OUT1()
{
    $wrbyte0 = 0;
    $wrbyte1 = 0;
    $wrbyte2 = 0;
    $wrbyte3 = 0;

    //$wrbyte0
    if($AD_SEL0 > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 1);
    }
    if($AD_SEL1 > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 2);
    }
    if($AD_SEL2 > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 4);
    }
    if($AD_SEL3 > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 8);
    }
    if($AD_SEL4 > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 10);
    }
    if($AD_SEL5 > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 20);
    }
    if($AD_SEL6 > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 40);
    }
    if($AD_SEL7 > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 80);
    }
    
    //wrbyte1
    if($PUMP_CLR_FLT_ON > 0)
    {
        $wrbyte1 = BitWiseOr($wrbyte1, 1);
    }
    if($SYNC_LOC_OUT > 0)
    {
        $wrbyte1 = BitWiseOr($wrbyte1, 2);
    }
    if($SYNC_OUT > 0)
    {
        $wrbyte1 = BitWiseOr($wrbyte1, 4);
    }
    if($LGCTRL1 > 0)
    {
        $wrbyte1 = BitWiseOr($wrbyte1, 8);
    }
    if($LGCTRL2 > 0)
    {
        $wrbyte1 = BitWiseOr($wrbyte1, 10);
    }
    if($LGCTRL3 > 0)
    {
        $wrbyte1 = BitWiseOr($wrbyte1, 20);
    }

    //wrbyte2
    if($LP_MON_A0 > 0)
    {
        $wrbyte2 = BitWiseOr($wrbyte2, 1);
    }
    if($LP_MON_A1 > 0)
    {
        $wrbyte2 = BitWiseOr($wrbyte2, 2);
    }
    if($LP_MON_A2 > 0)
    {
        $wrbyte2 = BitWiseOr($wrbyte2, 4);
    }
    if($LP_MON_SEL0 > 0)
    {
        $wrbyte2 = BitWiseOr($wrbyte2, 8);
    }
    if($LP_MON_SEL1 > 0)
    {
        $wrbyte2 = BitWiseOr($wrbyte2, 10);
    }
    if($LP_MON_SEL2 > 0)
    {
        $wrbyte2 = BitWiseOr($wrbyte2, 20);
    }
    if($LP_MON_SEL3 > 0)
    {
        $wrbyte2 = BitWiseOr($wrbyte2, 40);
    }
    if($ENCODER_FUSE_ON_N > 0)
    {
        $wrbyte2 = BitWiseOr($wrbyte2, 80);
    }
    
    //wrbyte3
    if($PUMP_EN_ON > 0)
    {
        $wrbyte3 = BitWiseOr($wrbyte3, 1);
    }
    if($SF6_24V_ON > 0)
    {
        $wrbyte3 = BitWiseOr($wrbyte3, 2);
    }
    if($SF6_VALVE_OPEN > 0)
    {
        $wrbyte3 = BitWiseOr($wrbyte3, 4);
    }
    if($WATER_FUSE_ON > 0)
    {
        $wrbyte3 = BitWiseOr($wrbyte3, 8);
    }
    if($DKB_FUSE_ON > 0)
    {
        $wrbyte3 = BitWiseOr($wrbyte3, 10);
    }
    if($PEND_FUSE_ON > 0)
    {
        $wrbyte3 = BitWiseOr($wrbyte3, 20);
    }
    //UpdateStatus($wrbyte0);
    //UpdateStatus($wrbyte1);
    //UpdateStatus($wrbyte2);
    //UpdateStatus($wrbyte3);

    $opbAddrStr = "00 03 00 02";
    $opbDataStr = $wrbyte3 + " " + $wrbyte2 + " " + $wrbyte1 + " " + $wrbyte0;
    call OpbWrite();
    return;
}

// Function writeGPIO_OUT2
// IN: $STAT_LED1_N, $STAT_LED2_N, ..., $ENCODER_TX_ENAB2
function writeGPIO_OUT2()
{
    $wrbyte0 = 0;
    $wrbyte1 = 0;
    $wrbyte2 = 0;
    $wrbyte3 = 0;

    //$wrbyte0
    if($STAT_LED1_N > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 1);
    }
    if($STAT_LED2_N > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 2);
    }
    if($STAT_LED3_N > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 4);
    }
    if($HEARTBEAT_LED_N > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 8);
    }
    if($CAN1_LED_N > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 10);
    }
    if($CAN2_LED_N > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 20);
    }
    if($CAN3_LED_N > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 40);
    }
    if($CAN4_LED_N > 0)
    {
        $wrbyte0 = BitWiseOr($wrbyte0, 80);
    }

    //wrbyte1
    if($ENCODER_TX_ENAB1 > 0)
    {
        $wrbyte1 = BitWiseOr($wrbyte1, 1);
    }
    if($ENCODER_TX_ENAB2 > 0)
    {
        $wrbyte1 = BitWiseOr($wrbyte1, 2);
    }

    //UpdateStatus($wrbyte0);
    //UpdateStatus($wrbyte1);
    //UpdateStatus($wrbyte2);
    //UpdateStatus($wrbyte3);

    $opbAddrStr = "00 03 00 03";
    $opbDataStr = $wrbyte3 + " " + $wrbyte2 + " " + $wrbyte1 + " " + $wrbyte0;
    call OpbWrite();
    return;
}

// function readADCResult
// Out: $adcResultFloat
function readADCResult()
{
    // Reset ADC
    $opbAddrStr = "00 05 08 00";
    $opbDataStr = "00 00 00 04";
    call OpbWrite();
    call OpbRead();

    // Configure sample length
    $opbAddrStr = "00 05 08 06";
    $opbDataStr = "00 00 00 10";
    call OpbWrite();
    call OpbRead();

    // Trigger ADC Capture
    $opbAddrStr = "00 05 08 00";
    $opbDataStr = "00 00 00 02";
    call OpbWrite();
    call OpbRead();

    // Check ADC Status
    $opbAddrStr = "00 05 08 08";
    call OpbRead();

    // Read ADC Result
    $opbAddrStr = "00 05 00 00";
    call OpbRead();

    $tmpStr = Array1DGetValue($opbDataArray, 2);
    $adcResult = $tmpStr * 256;
    $tmpStr = Array1DGetValue($opbDataArray, 3);
    $adcResult = $adcResult + $tmpStr;
    $adcResultFloat = $adcResult * 5.0 / 65536;
    //UpdateStatus($adcResultFloat);
    return;
}